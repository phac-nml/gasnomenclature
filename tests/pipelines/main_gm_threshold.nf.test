nextflow_pipeline {

    name "Integration Tests of adjusting gm_thresholds parameters"
    script "main.nf"

    test("Test fail pipeline if null threshold set") {
        tag "pipeline_failure_null_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                gm_thresholds = null
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ --gm_thresholds null: Cannot pass null or empty string")
        }
    }

    test("Test fail pipeline if empty threshold set") {
        tag "pipeline_failure_no_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                gm_thresholds = ""
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ --gm_thresholds : Cannot pass null or empty string")
        }
    }

    test("Test fail pipeline if negative threshold set") {
        tag "pipeline_failure_negative_threshold"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                gm_thresholds = "-1"
            }
        }

        then {
            assert workflow.failed
            assert workflow.stderr.contains('* --gm_thresholds: string [-1] does not match pattern ^(\\d+(\\.\\d+)?,)*\\d+(\\.\\d+)?$ (-1)')
        }
    }

    test("Test fail pipeline if mismatch between thresholds and scaled distm") {
        tag "pipeline_failure_threshold_scaled"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                gm_thresholds = "200,50,0"
                pd_distm = "scaled"
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ '--pd_distm scaled' is set, but '--gm_thresholds 200,50,0' contains thresholds outside of range [0,100]."
                                            + " Please either set '--pd_distm hamming' or adjust the threshold values.")
        }
    }

    test("Test fail pipeline if mismatch between thresholds and hamming distm") {
        tag "pipeline_failure_threshold_hamming"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                gm_thresholds = "2,1,0.5"
                pd_distm = "hamming"
            }
        }

        then {
            assert workflow.failed
            assert workflow.stdout.contains("ERROR ~ '--pd_distm hamming' is set, but '--gm_thresholds 2,1,0.5' contains fractions."
                                            + " Please either set '--pd_distm scaled' or remove fractions from distance thresholds.")
        }
    }

    test("Test fail pipeline with single threshold set to 1") {
        tag "pipeline_thresh_1_fail"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                gm_thresholds = "1"
            }
        }

        then {
            assert workflow.failed
            assert (workflow.stdout =~ /Genomic address too short for samples: \[\'sample1\', \'sample2\', \'sample3\'\] based on \{0: 1\.0\}/).find()
        }
    }

    test("Test pipeline with single threshold set to 1") {
        tag "pipeline_thresh_1_success"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet_thresh_1.csv"
                outdir = "results"

                gm_thresholds = "1"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check computed pairwise distances
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists_thresh_1.txt")
            assert actual_distances.text == expected_distances.text

            // Check called clusters
            def actual_calls = path("$launchDir/results/call/Called/results.text")
            def expected_calls = path("$baseDir/tests/data/called/expected_results_thresh_1.txt")
            assert actual_calls.text == expected_calls.text

            // Check IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").exists()
            assert path("$launchDir/results/iridanext.output.json").json == path("$baseDir/tests/data/irida/thresh1_iridanext.output.json").json

            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.sort { it.path} == path("$baseDir/tests/data/irida/thresh1_iridanext.output.json").json.files.global.sort { it.path}

            assert iridanext_metadata.size() == 1 && iridanext_metadata.containsKey("sampleQ")
            assert iridanext_metadata.sampleQ."genomic_address_name" == "2"
        }
    }

    test("Test fail pipeline with threshold set to 1,0") {
        tag "pipeline_thresh_1_0_fail"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet1.csv"
                outdir = "results"

                gm_thresholds = "1,0"
            }
        }

        then {
            assert workflow.failed
            assert (workflow.stdout =~ /Genomic address too short for samples: \[\'sample1\', \'sample2\', \'sample3\'\] based on \{0: 1\.0, 1: 0\.0\}/).find()
        }
    }

    test("Test pipeline with threshold set to 1,0") {
        tag "pipeline_thresh_1_0_success"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet_thresh_1_0.csv"
                outdir = "results"

                gm_thresholds = "1,0"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check computed pairwise distances
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists_thresh_1_0.txt")
            assert actual_distances.text == expected_distances.text

            // Check called clusters
            def actual_calls = path("$launchDir/results/call/Called/results.text")
            def expected_calls = path("$baseDir/tests/data/called/expected_results_thresh_1_0.txt")
            assert actual_calls.text == expected_calls.text

            // Check IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").exists()

            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_global = iridanext_json.files.global
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_global.sort { it.path} == path("$baseDir/tests/data/irida/thresh1.0_iridanext.output.json").json.files.global.sort { it.path}

            assert iridanext_metadata.size() == 1 && iridanext_metadata.containsKey("sampleQ")
            assert iridanext_metadata.sampleQ."genomic_address_name" == "2.2"
        }
    }
}
