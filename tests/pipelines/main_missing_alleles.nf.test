nextflow_pipeline {

    name "Integration Tests for parameters dealing with missing or removed alleles"
    script "main.nf"

    test("Full pipeline hashes and missing data") {
        tag "pipeline_hashes_missing"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash_missing.csv"
                outdir = "results"

                gm_thresholds = "1"
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check merged profiles
            def actual_profile_ref = path("$launchDir/results/locidex/merge/reference/merged_ref/merged_profiles_ref.tsv")
            def expected_profile_tsv = path("$baseDir/tests/data/profiles/expected-profile_missing1.tsv")
            assert actual_profile_ref.text == expected_profile_tsv.text

            // Check query profiles
            def actual_profile_query = path("$launchDir/results/locidex/merge/query/merged_value/merged_profiles_value.tsv")
            def expected_profile_query_tsv = path("$baseDir/tests/data/profiles/expected-profile_missing2.tsv")
            assert actual_profile_query.text == expected_profile_query_tsv.text

            // Check computed pairwise distances
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists_missing.txt")
            assert actual_distances.text == expected_distances.text

            // Verify cluster file
            def actual_cluster = path("$launchDir/results/cluster/clusters.tsv")
            def expected_cluster = path("$baseDir/tests/data/clusters/expected_clusters_missing.txt")
            assert actual_cluster.text == expected_cluster.text

            // Check called clusters
            def actual_calls = path("$launchDir/results/call/Called/results.text")
            def expected_calls = path("$baseDir/tests/data/called/expected_results_missing.txt")
            assert actual_calls.text == expected_calls.text

            // Check IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").json == path("$baseDir/tests/data/irida/missing_iridanext.output.json").json

            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_metadata.size() == 1 && iridanext_metadata.containsKey("sampleQ")
            assert iridanext_metadata.sampleQ."address" == "1"
        }
    }

    test("Full pipeline hashes and missing data count missing as differences") {
        tag "pipeline_hashes_missing_count_missing"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash_missing.csv"
                outdir = "results"

                gm_thresholds = "1"
                pd_count_missing = true
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check computed pairwise distances
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists_count-missing.txt")
            assert actual_distances.text == expected_distances.text

            // Check called clusters
            def actual_calls = path("$launchDir/results/call/Called/results.text")
            def expected_calls = path("$baseDir/tests/data/called/expected_results_count-missing.txt")
            assert actual_calls.text == expected_calls.text

            // Check IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").json == path("$baseDir/tests/data/irida/count-missing_iridanext.output.json").json

            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_metadata.size() == 1 && iridanext_metadata.containsKey("sampleQ")
            assert iridanext_metadata.sampleQ."address" == "3"
        }
    }

    test("Full pipeline remove loci with missing data") {
        tag "pipeline_hashes_remove_missing_loci"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash_missing.csv"
                outdir = "results"

                gm_thresholds = "1"
                pd_count_missing = true
                pd_missing_threshold = 0.5
            }
        }

        then {
            assert workflow.success
            assert path("$launchDir/results").exists()

            // Check computed pairwise distances
            def actual_distances = path("$launchDir/results/distances/results.text")
            def expected_distances = path("$baseDir/tests/data/distances/expected_dists_loci-missing.txt")
            assert actual_distances.text == expected_distances.text

            // Check called clusters
            def actual_calls = path("$launchDir/results/call/Called/results.text")
            def expected_calls = path("$baseDir/tests/data/called/expected_results_loci-missing.txt")
            assert actual_calls.text == expected_calls.text

            // Check IRIDA Next JSON output
            assert path("$launchDir/results/iridanext.output.json").json == path("$baseDir/tests/data/irida/loci-missing_iridanext.output.json").json

            def iridanext_json = path("$launchDir/results/iridanext.output.json").json
            def iridanext_samples = iridanext_json.files.samples
            def iridanext_metadata = iridanext_json.metadata.samples

            assert iridanext_metadata.size() == 1 && iridanext_metadata.containsKey("sampleQ")
            assert iridanext_metadata.sampleQ."address" == "3"
        }
    }

    test("Test fail pipeline if non-existent columns file is passed") {
        tag "pipeline_failure_columns_no_exist"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash_missing.csv"
                outdir = "results"

                pd_columns = "./no-exist"
            }
        }

        then {
            assert workflow.failed
            assert workflow.stderr.contains("* --pd_columns: the file or directory './no-exist' does not exist.")
        }
    }

    test("Test failure of pipeline when keeping no loci") {
        tag "pipeline_keep_zero_loci"

        when {
            params {
                input = "$baseDir/tests/data/samplesheets/samplesheet-hash_missing.csv"
                outdir = "results"

                gm_thresholds = "0"
                pd_columns = "$baseDir/tests/data/columns/keep-zero-loci-empty-file.txt"
            }
        }

        then {
            assert workflow.failed
        }
    }
}

